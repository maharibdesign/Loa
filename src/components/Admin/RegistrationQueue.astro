---
import { createSupabaseAdmin } from "../../lib/supabase";

const supabase = createSupabaseAdmin();

// Fetch pending users
const { data: users, error } = await supabase
    .from('users')
    .select('id, full_name, age, grade, phone, email, receipt_url, created_at')
    .eq('status', 'Pending Approval')
    .order('created_at', { ascending: true });

if (error) {
    console.error("Error fetching pending users:", error);
}

// Generate signed URLs for receipts
const usersWithSignedUrls = users ? await Promise.all(
    users.map(async (user) => {
        const { data, error: urlError } = await supabase.storage
            .from('payment_receipts')
            .createSignedUrl(user.receipt_url, 60 * 10); // 10 minute expiry
        if (urlError) {
            console.error("Error creating signed URL for user", user.id, urlError);
        }
        return {
            ...user,
            receipt_signed_url: data?.signedUrl || '#',
        };
    })
) : [];
---

<div id="registration-queue" class="bg-tg-secondary-bg p-4 rounded-lg shadow-inner">
    <h2 class="text-xl font-bold mb-4">Pending Registrations ({usersWithSignedUrls.length})</h2>
    
    {usersWithSignedUrls.length === 0 && <p class="text-tg-hint">No pending registrations.</p>}

    <div class="space-y-4">
        {usersWithSignedUrls.map(user => (
            <div class="bg-tg-bg p-3 rounded-md border border-gray-700/50" data-user-id={user.telegram_id}>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-1 text-sm">
                    <div><strong>Name:</strong> {user.full_name}</div>
                    <div><strong>Age:</strong> {user.age}</div>
                    <div><strong>Grade:</strong> {user.grade}</div>
                    <div><strong>Phone:</strong> <a href={`tel:${user.phone}`} class="text-tg-link">{user.phone}</a></div>
                    <div class="md:col-span-2"><strong>Email:</strong> <a href={`mailto:${user.email}`} class="text-tg-link">{user.email}</a></div>
                    <div class="md:col-span-2"><strong>Submitted:</strong> {new Date(user.created_at).toLocaleString()}</div>
                    <div class="md:col-span-2"><strong>Receipt:</strong> <a href={user.receipt_signed_url} target="_blank" class="text-tg-link underline">View Receipt</a></div>
                </div>
                <div class="mt-3 flex gap-2">
                    <button class="approve-btn w-full bg-green-600 hover:bg-green-700 text-white font-bold py-1 px-3 rounded text-sm" data-user-id={user.id}>Approve</button>
                    <button class="reject-btn w-full bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-3 rounded text-sm" data-user-id={user.id}>Reject</button>
                </div>
            </div>
        ))}
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const tg = window.Telegram?.WebApp;
        if (!tg || !tg.initData) return;

        const handleAction = async (userId, newStatus, button) => {
            const originalText = button.textContent;
            button.disabled = true;
            button.textContent = '...';

            try {
                // We use a different API endpoint for admin actions
                const response = await fetch('/api/admin/user-management', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        initData: tg.initData,
                        userId: userId,
                        status: newStatus
                    })
                });

                if (!response.ok) {
                    const result = await response.json();
                    throw new Error(result.error || 'Request failed');
                }
                
                // On success, remove the card from the UI
                button.closest('[data-user-id]').remove();
                tg.HapticFeedback.notificationOccurred('success');

            } catch (error) {
                alert(`Error: ${error.message}`);
                button.disabled = false;
                button.textContent = originalText;
                tg.HapticFeedback.notificationOccurred('error');
            }
        };

        document.querySelectorAll('.approve-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const userId = (e.target as HTMLButtonElement).dataset.userId;
                handleAction(userId, 'Active', e.target as HTMLButtonElement);
            });
        });

        document.querySelectorAll('.reject-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const userId = (e.target as HTMLButtonElement).dataset.userId;
                handleAction(userId, 'Rejected', e.target as HTMLButtonElement);
            });
        });
    });
</script>