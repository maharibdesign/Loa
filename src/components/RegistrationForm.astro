---
import { useTranslations } from '../lib/i18n';

const { currentLocale } = Astro;
const t = useTranslations(currentLocale as 'en' | 'am');
---
<div id="registration-container" class="space-y-6">
    <div class="text-center">
        <h1 class="text-2xl font-bold text-tg-text">{t('register.title')}</h1>
        <p class="text-tg-hint">{t('register.subtitle')}</p>
    </div>

    <form id="registration-form" class="space-y-4">
        <!-- Full Name -->
        <div>
            <label for="full_name" class="block text-sm font-medium text-tg-text">{t('register.full_name')}</label>
            <input type="text" id="full_name" name="full_name" required class="mt-1 block w-full bg-tg-secondary-bg border border-gray-600 rounded-md shadow-sm p-2 text-tg-text focus:ring-tg-link focus:border-tg-link" placeholder={t('register.full_name_placeholder')}>
            <p class="text-red-500 text-xs mt-1 error-message"></p>
        </div>

        <!-- Age -->
        <div>
            <label for="age" class="block text-sm font-medium text-tg-text">{t('register.age')}</label>
            <input type="number" id="age" name="age" required min="12" max="60" class="mt-1 block w-full bg-tg-secondary-bg border border-gray-600 rounded-md shadow-sm p-2 text-tg-text focus:ring-tg-link focus:border-tg-link" placeholder="18">
            <p class="text-red-500 text-xs mt-1 error-message"></p>
        </div>

        <!-- Grade -->
        <div>
            <label for="grade" class="block text-sm font-medium text-tg-text">{t('register.grade')}</label>
            <input type="text" id="grade" name="grade" required class="mt-1 block w-full bg-tg-secondary-bg border border-gray-600 rounded-md shadow-sm p-2 text-tg-text focus:ring-tg-link focus:border-tg-link" placeholder={t('register.grade_placeholder')}>
            <p class="text-red-500 text-xs mt-1 error-message"></p>
        </div>

        <!-- Phone -->
        <div>
            <label for="phone" class="block text-sm font-medium text-tg-text">{t('register.phone')}</label>
            <input type="tel" id="phone" name="phone" required class="mt-1 block w-full bg-tg-secondary-bg border border-gray-600 rounded-md shadow-sm p-2 text-tg-text focus:ring-tg-link focus:border-tg-link" placeholder={t('register.phone_placeholder')}>
            <p class="text-red-500 text-xs mt-1 error-message"></p>
        </div>

        <!-- Email -->
        <div>
            <label for="email" class="block text-sm font-medium text-tg-text">{t('register.email')}</label>
            <input type="email" id="email" name="email" required class="mt-1 block w-full bg-tg-secondary-bg border border-gray-600 rounded-md shadow-sm p-2 text-tg-text focus:ring-tg-link focus:border-tg-link" placeholder={t('register.email_placeholder')}>
            <p class="text-red-500 text-xs mt-1 error-message"></p>
        </div>
        
        <!-- Receipt -->
        <div>
            <label for="receipt" class="block text-sm font-medium text-tg-text">{t('register.receipt')}</label>
            <input type="file" id="receipt" name="receipt" required accept="image/png, image/jpeg, image/webp" class="mt-1 block w-full text-sm text-tg-hint file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-tg-button file:text-tg-button-text hover:file:bg-opacity-80">
            <p class="mt-1 text-xs text-tg-hint">{t('register.receipt_help')}</p>
            <p class="text-red-500 text-xs mt-1 error-message"></p>
        </div>

        <button type="submit" id="submit-button" class="w-full bg-tg-button text-tg-button-text font-bold py-2 px-4 rounded-lg hover:opacity-90 disabled:opacity-50">
            {t('register.submit')}
        </button>
        <div id="form-error" class="text-red-500 text-sm text-center"></div>
    </form>
</div>

<div id="success-message" class="hidden text-center p-8 space-y-4">
    <svg class="mx-auto h-12 w-12 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    <h2 class="text-2xl font-bold text-tg-text">{t('register.success_title')}</h2>
    <p class="text-tg-hint">{t('register.success_message')}</p>
</div>


<script define:vars={{ t }}>
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('registration-form');
    const submitButton = document.getElementById('submit-button');
    const formErrorDiv = document.getElementById('form-error');
    const registrationContainer = document.getElementById('registration-container');
    const successMessage = document.getElementById('success-message');

    const tg = window.Telegram?.WebApp;
    
    if (!tg || !tg.initData) {
        form.innerHTML = `<p class="text-red-500 text-center">${t('errors.invalid_telegram_data')}</p>`;
        return;
    }

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        submitButton.disabled = true;
        submitButton.textContent = t('register.submitting');
        formErrorDiv.textContent = '';
        clearErrors();

        const formData = new FormData(form);
        formData.append('initData', tg.initData);
        formData.append('language', 'en'); // You can dynamically set this

        try {
            const response = await fetch('/api/registration', {
                method: 'POST',
                body: formData,
            });

            const result = await response.json();

            if (!response.ok) {
                if (result.errors) {
                    displayErrors(result.errors);
                    formErrorDiv.textContent = t('register.error_message');
                } else {
                    formErrorDiv.textContent = result.error || 'An unknown error occurred.';
                }
                throw new Error(result.error);
            }
            
            // Show success message
            registrationContainer.classList.add('hidden');
            successMessage.classList.remove('hidden');
            tg.HapticFeedback.notificationOccurred('success');

        } catch (error) {
            console.error('Submission failed:', error);
            submitButton.disabled = false;
            submitButton.textContent = t('register.submit');
            tg.HapticFeedback.notificationOccurred('error');
        }
    });

    function displayErrors(errors) {
        for (const field in errors) {
            const input = document.querySelector(`[name="${field}"]`);
            if (input) {
                const errorContainer = input.parentElement.querySelector('.error-message');
                if(errorContainer) {
                    errorContainer.textContent = errors[field].join(', ');
                }
            }
        }
    }
    
    function clearErrors() {
        document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
    }
});
</script>